// 1. Задать температуру в градусах по Цельсию. Вывести в alert соответствующую температуру в градусах по Фаренгейту. Подсказка: расчет идет по формуле Tf = (9 / 5) * Tc + 32, где Tf — температура по Фаренгейту, Tc — по Цельсию. 

var celsius = prompt('Введите значение температуры по Цельсию: ')
var fahrenheit = celsius * 1.8 + 32;

alert(celsius + ' градусов по Цельсию будет равно ' + fahrenheit + ' градусам по Фаренгейту')

// 2. Объявить две переменные: admin и name. Записать в name строку "Василий"; Скопировать значение из name в admin. Вывести admin (должно вывестись «Василий»). 

var name, admin;
var name = 'Василий';
var admin = name;


alert('Администратор ' + name + '.')

// 3* Чему будет равно JS-выражение 1000 + "108"?

// В JavaScript обычно при помощи плюса '+' складываются числа. Но если хотя бы один операнд является строкой, то второй будет также преобразован в строку. При этом  не важно, первый или второй операнд является строкой.Поэтому выражение 1000 + "108" будет равно: 1000108.

// 4. * Самостоятельно разобраться с атрибутами тега script (async и defer).

// Подключаемые скрипты (JavaScript) блокирует загрузку HTML кода. Когда браузер (парсер) доходит до тега <script> он останавливается, чтобы загрузить контент файла и выполнить его код, и только после этого продолжает парсинг HTML.Такое поведение может тормозить отображение HTML, когда на странице загружаются много файлов JavaScript. Часто код этих файлов не нужен, чтобы показать HTML страницы.

// У элемента <script> есть два атрибута, async и defer, которые могут дать нам больше контроля над тем, как и когда файл загружаются и выполняются.

// Атрибут async
// Означает, что скрипт абсолютно независим:

// - Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
// - Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
//      - DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова),
//      - …так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше).
// - Остальные скрипты не ждут async, и скрипты c async не ждут другие скрипты.

// Атрибут defer
// - Cообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда DOM дерево будет полностью построено.
// - Скрипты с defer никогда не блокируют страницу.
// - Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.